#Analyze data 
from covariance import gather_json,test_denergy_err
from numpy import array 
import numpy as np 

#Checking errors multiple runs
'''
vals=[]
errs=[]

jsonfn='Cuvtz0_B3LYP_s1_g0.9.vmc.json'
val,err=test_denergy_err(jsonfn)
vals.append(val)
errs.append(err)

for i in range(1,10):
  jsonfn='/u/sciteam/sapatha2/scratch/nchoose10_sgn2_'+str(i)+'/Cuvtz0_B3LYP_s1_g0.9.vmc.json'
  val,err=test_denergy_err(jsonfn)
  vals.append(val)
  errs.append(err)

print(vals)
print(errs)
'''

'''
vals=[array([ 0.04343067, -0.02174137,  0.00878959, -0.03245218, -0.03787727,
        0.04666178,  0.0534542 , -0.02665493,  0.05014488,  0.01047888]), array([ 0.04452146, -0.02123051,  0.03308684, -0.03229256, -0.04132812,
        0.04818413,  0.05090193, -0.00455824,  0.04814005,  0.01142982]), array([ 0.03684819, -0.01613112,  0.01714861, -0.03893323, -0.02990823,
        0.04582611,  0.04661786, -0.01989527,  0.04024136, -0.01632463]), array([ 0.04108027, -0.02419655,  0.02711379, -0.02882095, -0.05464109,
        0.03345109,  0.0526137 , -0.02616438,  0.04829639,  0.00892531]), array([ 0.04231422, -0.02111501,  0.02814852, -0.03084169, -0.04286222,
        0.04590461,  0.05033414, -0.02000778,  0.04604229,  0.00748729]), array([ 0.04050356, -0.02914933,  0.03241274, -0.03105938, -0.04085708,
        0.05207861,  0.04705978, -0.0259362 ,  0.05082805,  0.00684263]), array([ 0.04021145, -0.01719663,  0.0290639 , -0.02326923, -0.03936638,
        0.04874033,  0.06030178, -0.02358628,  0.04659149,  0.00448576]), array([ 0.04537077, -0.02031489,  0.03192858, -0.03153906, -0.03816657,
        0.04590307,  0.05282192, -0.02393762,  0.04972094,  0.00705513]), array([ 0.03938748, -0.02246082,  0.02970399, -0.0316799 , -0.04201166,
        0.04511269,  0.0492482 , -0.01890281,  0.04685692,  0.00935399]), array([ 0.04301146, -0.01655174,  0.02989699, -0.03004279, -0.04377084,
        0.04794948,  0.05268539, -0.02615886,  0.04562091, -0.00077141])]
err=[array([0.00243734, 0.00375719, 0.00913505, 0.00254239, 0.00536653,
       0.00371509, 0.00203655, 0.00265626, 0.00225609, 0.00253302]), array([0.00241476, 0.00211847, 0.00302945, 0.00227712, 0.0024708 ,
       0.00250175, 0.00204803, 0.00972356, 0.0018461 , 0.00235384]), array([0.00579822, 0.00309001, 0.00941507, 0.00705295, 0.00863437,
       0.00211783, 0.00552998, 0.00311978, 0.01587828, 0.0225022 ]), array([0.00251336, 0.00255951, 0.00267058, 0.00212822, 0.01358446,
       0.01665707, 0.00218286, 0.00205986, 0.00243335, 0.0031077 ]), array([0.00179814, 0.00218608, 0.00337519, 0.00208586, 0.00211271,
       0.00286716, 0.00299434, 0.00257213, 0.00200944, 0.00253239]), array([0.00210848, 0.0049257 , 0.00318834, 0.00222782, 0.00276144,
       0.0032204 , 0.00203042, 0.00254236, 0.00448231, 0.00239553]), array([0.00230391, 0.00272537, 0.00312317, 0.00463806, 0.00287972,
       0.0019982 , 0.005427  , 0.00420576, 0.00222665, 0.00484358]), array([0.00307668, 0.00257254, 0.00269445, 0.00258785, 0.00243295,
       0.00180757, 0.00193174, 0.00307417, 0.00218115, 0.00443929]), array([0.00224167, 0.00187152, 0.0024742 , 0.00258028, 0.00238988,
       0.00209251, 0.00247243, 0.00265329, 0.00186174, 0.00237066]), array([0.00170582, 0.00248578, 0.00284683, 0.00262613, 0.00290882,
       0.00224958, 0.00269355, 0.00358381, 0.00240497, 0.00296977])]

vals=array(vals).T
err=array(err).T

std_from_vals=[]
std_from_errs=[]

for i in range(vals.shape[0]):
  std_from_vals.append(np.std(vals[i]))
  std_from_errs.append(np.mean(err[i]))

print(std_from_vals)
print(std_from_errs) 
'''

std_from_vals=[0.0024379592918424603, 0.0037122329229159375, 0.007347588373025873, 0.003644718895037174, 0.0058462793158079625, 0.004601906261637669, 0.003686646338454504, 0.006312806614058519, 0.0028809215401943877, 0.007795750965597927]
std_from_errs=[0.0026398380000000003, 0.0028292169999999998, 0.0041952330000000005, 0.003074668, 0.004554167999999999, 0.003922716, 0.00293469, 0.003619098, 0.003758008, 0.0050047979999999995]

import matplotlib.pyplot as plt 
plt.plot(std_from_vals,'bo',label='std(d<H>/dp)')
plt.plot(std_from_errs,'go',label='linear estimation')
plt.legend(loc=1)
plt.xlabel("Parameter number")
plt.ylabel("Error bar value")
plt.show()
